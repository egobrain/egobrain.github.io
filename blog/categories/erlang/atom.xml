<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Категория: Erlang | Egobrain]]></title>
  <link href="http://www.egobrain.ru/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://www.egobrain.ru/"/>
  <updated>2016-06-03T22:27:32+03:00</updated>
  <id>http://www.egobrain.ru/</id>
  <author>
    <name><![CDATA[Kozlov Yakov]]></name>
    <email><![CDATA[xazar.studio@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang ORM. часть 3]]></title>
    <link href="http://www.egobrain.ru/blog/2016/06/02/erlang-orm-part-3/"/>
    <updated>2016-06-02T19:26:22+03:00</updated>
    <id>http://www.egobrain.ru/blog/2016/06/02/erlang-orm-part-3</id>
    <content type="html"><![CDATA[<p>Прошло уже очень много времени с момента как я писал про свои эксперименты с Erlang ORM.<br/>
И что я могу сказать? <br/>
Первое и самое, вероятно, печальное, подход оказался не жизнеспособным,
Второе &ndash; несмотря на недостатки ORM ее использование помогло набраться опыта работы с postgresql из Erlang и получить представление о том как все действительно должно работать.</p>

<p>Где я допустил ошибки:<br/>
&ndash; Нельзя мешать в одной модели описание того как данные хранятся в базе и как будут отдаваться клиенту<br/>
&ndash; Не стоило мешать генерацию sql и непосредственную работу с БД в одном проекте<br/>
&ndash; Подход ActiveRecord &ndash; не самая лучшая идея для Erlang<br/>
&ndash; Слишком много parse_transform-a</p>

<p>За эти 2 года я очень часто сталкивался с генерацией sql в чужих проектах на Erlang и, к сожалению, единого, общепризнанного, да что там, хотя бы просто удобного решения нигде не встречал.
Везде лишь ад из case блоков, сверток и iolist-ов.
Что еще печальнее, коллеги все чаще стали поглядывать в сторону Elixir с его ecto. А уж совсем не хочется изучать, а тем более использовать в продакшене еще один язык.</p>

<p>Так на свет появился стек для работы с postgresql и моделями данных:<br/>
&ndash; <a href="https://github.com/egobrain/epgpool">epgpool</a> &ndash; простой пулл подключений к postgres. Очередной велосипед, если есть предложения чего-то получше &ndash; могу рассмотреть<br/>
&ndash; <a href="https://github.com/egobrain/dbschema">dbschema</a>  &ndash; автоматические миграции наше все. Библиотек позволяет исполнять sql и erl up/down инструкции. Что убирает кучу работы по ручной раскладке и позволяет автоматизировать тестирование<br/>
&ndash; <a href="https://github.com/egobrain/emodel">emodel</a>  &ndash; библиотека для валидации входных данных. Та самая прослойка, которая должна отделять чистые, проверенные данные от мусора, который к нам прилетает. Отличается тем, что возвращает сразу все ошибки до которых может   дотянуться.<br/>
&ndash; <a href="https://github.com/egobrain/equery">equery</a>  &ndash; генерация sql, вдохновленная подходом Ecto<br/>
&ndash; <a href="https://github.com/egobrain/repo">repo</a>  &ndash; одна из возможных реализаций CRUD библиотеки поверх <a href="https://github.com/egobrain/equery">equery</a> и <a href="https://github.com/egobrain/epgpool">epgpool</a>.</p>

<p>Сегодня я расскажу про <a href="https://github.com/egobrain/repo">repo</a> и <a href="https://github.com/egobrain/equery">equery</a>.</p>

<h1>Equery</h1>

<p>Какие проблемы с ручным написанием sql?<br/>
1. Как выразился один мой бывший коллега, основная проблема &ndash; смапить результат исполнения sql на внутреннюю структуру данных<br/>
2. Сложность композиции. (К примеру, как добавить еще один фильтр к уже имеющимся)<br/>
3. Необходимость модифицировать разрозненные запросы в случае добавления, удаления полей в таблице.</p>

<p>Как будем решать?</p>

<p>Итак, понадобится сущность, которая будет описывать структуру таблицы SQL (Благо в Erlang r17 появились мапы и с ними жизнь стала намного легче).
Решение в лоб</p>

<p>```erlang
Schema = #{</p>

<pre><code>fields =&gt; #{
   field_1 =&gt; Fields1Opts,
   field_2 =&gt; Fields2Opts,
},
table =&gt; &lt;&lt;"SomeTableName"&gt;&gt;
</code></pre>

<p>}
```
FieldOpts &ndash; Набор дополнительной информации о колонках. Например:<br/>
&ndash; type &ndash; тип в бд ({varchar, 255}, decimal, int, text, bigint, &hellip;)<br/>
&ndash; required &ndash; аналог NOT NULL (boolean)<br/>
&ndash; readOnly &ndash; удобная опция, в случае если поле нельзя обновлять, например id, который генерируется через serial или timestamp через now()<br/>
&ndash; index &ndash; поле является индексом, или частью составного индекса (boolean)<br/>
&ndash; &hellip; &ndash; что угодно. Т.к. Opts &ndash; это map(), то можно добавлять свои опции по желанию.</p>

<p>К этому моменту у меня примерно прояснилась картина, как я хочу видеть код.</p>

<p><code>erlang
Query1 = from(Schema),
Query2 = filter(Query1),
...
Result = select(QueryN)
</code></p>

<p>Скорее всего делать внутреннее представление SQL придется через какой-то промежуточный AST, но, у меня есть одно важное требование &ndash; легкое добавление SQL конструкций, которых еще нет в моей библиотеке.
Делать полноценный AST который потом бы компилировался в SQL или во что-то еще я не хочу. У меня есть postgresql и это все что мне нужно на данный момент.
При такой постановке вопроса проектировать решение становится заметно проще :)
Я взял на вооружение подход из моей предыдущей ORM &ndash; добавить дополнительную разметку прямо в SQL</p>

<p>Возьмем пример:</p>

<p><code>
select sum(o.sum), u.name from users as u join orders o on o.user_id = u.id where u.age &gt; 18 group by u.name
</code></p>

<p>Что понадобится?<br/>
Ключевые слова, операции, пробелы, запятые и прочее что должно быть встроено &ldquo;как есть&rdquo; назовем raw (в equery &ndash; <code>{'$raw', iolist()}</code> ).<br/>
Названия таблиц повторяются часто и не хотелось бы чтобы при объединении запросов были проблемы с одинаковыми псевдонимами поэтому есть 2 варианта:<br/>
1. генерировать уникальные псевдонимы по ходу построения запроса<br/>
2. генерировать их в самом конце &ndash; при генерации sql, а в ast использовать уникальную &ldquo;ссылку&rdquo;</p>

<p>Т.к. posgresql кэширует план запросов &ndash; то нужно чтобы один и тот же код каждый раз давал один и тот же результат.<br/>
Следовательно решение 1 отпадает и вводим дополнительную конструкцию {table, UniqueRef} там где нужно ссылаться на поля таблиц. (в equery &ndash; <code>{'$table', ref()}</code>)<br/>
Чтобы как-то группировать несколько синтаксических конструкций в одну добавим выражение {exp, [Nodes]} (в equery &ndash; <code>{'$exp', ref()}</code>)<br/>
Все остальное считаем данными и при генерации SQL будем их собирать в отдельном списке, а в SQL на этом месте проставлять  ссылки на аргументы <code>$1, $2, ...</code></p>

<p>В результате sql из примера превращается в AST:</p>

<p>```erlang
{exp, [</p>

<pre><code>{raw, "select "},
{exp, [
    {raw, "sum("},
        {exp, [{table, Ref2},{raw, "."},{raw, "sum"}]},
    {raw, ")"}
]}
{raw, ","},
{exp, [{table, Ref1},{raw, "."},{raw, "name"}]},
{raw, " from users as "}, {table, Ref1},
{raw, " join orders as"}, {table, Ref2}, 
{raw, " on "},
{exp, [
    {exp, [{table, Ref2},{raw, "."},{raw, "user_id"}]},
    {raw, " = "},
    {exp, [{table, Ref1},{raw, "."},{raw, "id"}]},
]},
{raw, " where "},
{exp, [
    {exp, [{table, Ref1},{raw, "."},{raw, "age"}]},
    {raw, " = "},
    18
]},
{raw, " group by"},
{exp, [{table, Ref1},{raw, "."},{raw, "name"}]}
</code></pre>

<p>]}
```</p>

<p>Как преобразовать такое представление в SQL + Args, думаю вполне очевидно.
А вот как строить его с помощью erlang?</p>

<p>Для начала нам понадобятся схемы для таблиц:</p>

<p>```
UserSchema = #{</p>

<pre><code>fields =&gt; #{
    id =&gt; #{type =&gt; int, index =&gt; true, required =&gt; true, readOnly =&gt; true},
    name =&gt; #{type =&gt; {varchar, 255}, required =&gt; true},
    age =&gt; #{type =&gt; int}
},
table =&gt; &lt;&lt;"users"&gt;&gt;
</code></pre>

<p>}.</p>

<p>OrderSchema = #{</p>

<pre><code>fields =&gt; #{
    id =&gt; #{type =&gt; int, index =&gt; true, required =&gt; true, readOnly =&gt; true},
    user_id =&gt; #{type =&gt; int, required =&gt; true},
    sum =&gt; #{type =&gt; number, required =&gt; true}
},
table =&gt; &lt;&lt;"orders"&gt;&gt;
</code></pre>

<p>}
```</p>

<p>Начнем с того, что должна делать функция <code>from(Schema)</code></p>

<p><code>erlang
Query1 = from(UserSchema).
</code></p>

<p>В AST видны повторяющиеся конструкции для ссылок на поля <code>{exp, [{table, Ref1},{raw, "."},{raw, "name"}]}</code>.
Следовательно, нужно сгенерировать Ref1 и для каждого поля из схемы построить такое AST выражение.
Получится map, который я называю TableData:</p>

<p>```erlang
Ref1 = make_ref(),</p>

<h1>{</h1>

<pre><code>id   =&gt; {exp, [{table, Ref1},{raw, "."},{raw, "id"}]},
name =&gt; {exp, [{table, Ref1},{raw, "."},{raw, "name"}]},
age  =&gt; {exp, [{table, Ref1},{raw, "."},{raw, "age"}]},
</code></pre>

<p>}
```</p>

<p>теперь про функции. Для реализации текущего запроса нам нужны функции <code>sum</code> и <code>=</code>. Выглядят они очень просто:</p>

<p>```erlang
sum(Field) &ndash;></p>

<pre><code>{exp, [{raw, "sum("}, F, {raw, ")"}]}.
</code></pre>

<p>&lsquo;=:=&rsquo;(A, B) &ndash;></p>

<pre><code>{exp, [A, {raw, " = "}, B]}.
</code></pre>

<p>```</p>

<p>Как строить where?
Я сделал функцию <code>where(Fun, Query)</code> принимающую Fun, в которую передается несколько TableData уже участвующих в запросе, а на выходе AST для where выражения.
Результирующий AST добавляется через and к тому, который уже хранится в Query.</p>

<p><code>
Query2 = where(fun([#{age := Age}]) -&gt; '=:='(Age, 18) end, Query1).
</code></p>

<p>С join поступим похожим образом,</p>

<p><code>erlang
Query3 = join(OrderSchema, fun([#{id := Id}, #{user_id := UserId}]) -&gt; '=:='(Id, UserId) end, Query2).
</code></p>

<p>для OrderSchema создается OrderTableData и вместе с UserTableData, которая уже есть в запросе передается в callback.</p>

<p>Что касается group by то функция тоже очень похожа на предыдущие только возвращает не AST, а массив в котором описано по каким полям группировать</p>

<p><code>erlang
Query4 = group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end, Query3).
</code></p>

<p>Осталось сделать select. Функция не будет исключением и работает по сходным правила</p>

<p><code>erlang
Query5 = select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; sum(OrderSum)} end, Query4)
</code>
select callback возвращает описание результата &ndash; это может быть или map или одно поле (удобно для count).</p>

<p>Query готов. Осталось только на основе него сгенерировать итоговый Select AST и преобразовать его в SQL. Этим займемся чуть позже.
А пока приведу код запроса полностью и попробуем сделать его чуть-чуть красивее.</p>

<p><code>erlang
Query1 = from(UserSchema),
Query2 = where(fun([#{age := Age}]) -&gt; '=:='(Age, 18) end, Query1),
Query3 = join(OrderSchema, fun([#{id := Id}, #{user_id := UserId}]) -&gt; '=:='(Id, UserId) end, Query2),
Query4 = group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end, Query3),
Query5 = select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; sum(OrderSum)} end, Query4)
</code></p>

<p>Во-первых, давайте перенесем все функции, модифицирующие запрос в отдельный модуль. Для лаконичности q.erl
Функции, которые генерирую postgresql AST для операций в другой модуль &ndash; pg_sql.erl</p>

<p><code>erlang
Query1 = q:from(UserSchema),
Query2 = q:where(fun([#{age := Age}]) -&gt; pg_sql:'=:='(Age, 18) end, Query1),
Query3 = q:join(OrderSchema, fun([#{id := Id}, #{user_id := UserId}]) -&gt; pg_sql:'=:='(Id, UserId) end, Query2),
Query4 = q:group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end, Query3),
Query5 = q:select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; pg_sql:sum(OrderSum)} end, Query4)
</code></p>

<p>Во-вторых, передавать схему как map не совсем практично. В дальнейшем нам понадобится больше функционала для моделей. Поэтому перенесем каждую схему в свой модуль.
Я использую префикс <strong>m_</strong> и функцию <code>schema/0</code>.</p>

<p>m_user.erl
```erlang
-module(m_user).
-export([schema/0]).</p>

<p>schema() &ndash;></p>

<pre><code>#{
    fields =&gt; #{
        id =&gt; #{type =&gt; int, index =&gt; true, required =&gt; true, readOnly =&gt; true},
        name =&gt; #{type =&gt; {varchar, 255}, required =&gt; true},
        age =&gt; #{type =&gt; int}
    },
    table =&gt; &lt;&lt;"users"&gt;&gt;
}.
</code></pre>

<p>```</p>

<p>m_order.erl
```erlang
-module(m_order).
-export([schema/0]).</p>

<p>schema() &ndash;></p>

<pre><code>#{
    fields =&gt; #{
        id =&gt; #{type =&gt; int, index =&gt; true, required =&gt; true, readOnly =&gt; true},
        user_id =&gt; #{type =&gt; int, required =&gt; true},
        sum =&gt; #{type =&gt; number, required =&gt; true}
    },
    table =&gt; &lt;&lt;"orders"&gt;&gt;
}.
</code></pre>

<p>```</p>

<p>попутно обучим функции, которые принимали схему принимать модуль и дергать Module:schema() при этом.</p>

<p>Теперь возьмемся за то, что ломает глаза и бесит многих, кто приходит в erlang из других языков: повторы QueryN.
Ну как решать эту проблему мы-то знаем ;)
В elixir для этого существует pipe оператор <code>|&gt;</code>, в erlang его нет, но можно сделать по-другому:</p>

<p>```erlang
pipe(State, Funs) &ndash;></p>

<pre><code>lists:foldl(fun(F, St) -&gt; F(St) end, State, Funs).
</code></pre>

<p>```</p>

<p>а для каждой функции из q заведем каррированый аналог.</p>

<p><code>f(Fun, Query).</code> => <code>f(Fun) -&gt; fun(Query) -&gt; f(Fun, Query) end.</code></p>

<p>получилось:</p>

<p>```erlang
q:pipe(q:from(m_user), [</p>

<pre><code>q:where(fun([#{age := Age}]) -&gt; pg_sql:'=:='(Age, 18) end),
q:join(m_order, fun([#{id := Id}, #{user_id := UserId}]) -&gt; pg_sql:'=:='(Id, UserId) end),
q:group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end),
q:select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; pg_sql:sum(OrderSum)} end)
</code></pre>

<p>]).
```</p>

<p>теперь можно легко переставлять выражения (но порядок все-таки важен)</p>

<p>```erlang
q:pipe(q:from(m_user), [</p>

<pre><code>q:join(m_order, fun([#{id := Id}, #{user_id := UserId}]) -&gt; pg_sql:'=:='(Id, UserId) end),
q:select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; pg_sql:sum(OrderSum)} end),
q:group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end),
q:where(fun([#{age := Age}]) -&gt; pg_sql:'=:='(Age, 18) end)
</code></pre>

<p>]).
```</p>

<p>Получился вполне удобный язык запросов, который удовлетворяет всем требованиям которые я описал выше.
Все это и немного больше находится в библиотеке <a href="https://github.com/egobrain/equery">equery</a>
и пока ее возможностей хватает чтобы покрыть 95% того что мне сейчас нужно (5% &ndash; это union, которых пока нет и выборка из нескольких таблиц <code>select * from table1, table2, ...</code> , но поддержка появится в скором будущем)</p>

<p>Маленький бонус. Для тех, кому как и мне, не совсем приятно и удобно читать выражения вида</p>

<p>```erlang
pg_sql:&lsquo;andalso&rsquo;(</p>

<pre><code>pg_sql:'&gt;=(Age, 18),
pg_sql:'=&lt;'(Age, 25)
</code></pre>

<p>)
```</p>

<p>я реализовал parse_transform, который в q callback-ах позволяет писать код в erlang стиле</p>

<p><code>erlang
Age &gt;= 18 andalso Age =&lt; 25
</code></p>

<p><strong>работает даже в repl !!!</strong> :)</p>

<p>с ним наш запрос будет выглядеть так:</p>

<p>```erlang</p>

<p>-include_lib(&ldquo;equery/include/equery.hrl&rdquo;).</p>

<p>Query = q:pipe(q:from(m_user), [</p>

<pre><code>q:where(fun([#{age := Age}]) -&gt; Age =:= 18 end),                                                %% Изменения тут
q:join(m_order, fun([#{id := Id}, #{user_id := UserId}]) -&gt; Id =:= UserId end),      %%  и тут
q:group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end),
q:select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; pg_sql:sum(OrderSum)} end)
</code></pre>

<p>]).
```</p>

<p>Чтобы получить AST для select запроса нужно вызвать qsql:select/1. А чтобы получить SQL qast:to_sql/1.</p>

<p>```erlang
qast:to_sql(qsql:select(Query)).</p>

<p>{&lt;&lt;&ldquo;select \&rdquo;<strong>table-0\&ldquo;.\"name\&rdquo;,sum(\&ldquo;</strong>table-1\&rdquo;.\&ldquo;sum\&rdquo;) from \&ldquo;users\&rdquo; as \&ldquo;<strong>table-0\&rdquo; inner join \&ldquo;orders\&rdquo; as \&ldquo;</strong>table-1\&rdquo; on (\&ldquo;<strong>table-0\&rdquo;.\&ldquo;id\&rdquo; = \&ldquo;</strong>table-1\&rdquo;.\&ldquo;user_id\&rdquo;) where (\&ldquo;<strong>table-0\&rdquo;.\&ldquo;age\&rdquo; = $1) group by \&ldquo;</strong>table-0\&rdquo;.\&ldquo;name\&rdquo;&ldquo;>>,  [18]}
```</p>

<h1>REPO</h1>

<p>Генерация запросов это хорошо, но хочется еще добавлять, изменять, удалять сущности из БД.
Хочется исполнять запросы через pool, иметь хуки на сохранение и т.п.
Для этого всего я реализовал библиотеку <a href="https://github.com/egobrain/repo">repo</a>.
Она построена поверх <a href="https://github.com/egobrain/equery">equery</a> and <a href="https://github.com/egobrain/epgpool">epgpool</a></p>

<h2>Select</h2>

<p>С select запросами все совсем просто: пишешь запрос и он исполняется.</p>

<p>```
repo:all(m_user, [</p>

<pre><code>q:where(fun([#{age := Age}]) -&gt; Age =:= 18 end),   
q:join(m_order, fun([#{id := Id}, #{user_id := UserId}]) -&gt; Id =:= UserId end),
q:group_by(fun([#{name := Name}, _OrdersTableData]) -&gt; [Name] end),
q:select(fun([#{name := Name}, #{sum := OrderSum}]) -&gt; #{name =&gt; Name, sum =&gt; pg_sql:sum(OrderSum)} end)
</code></pre>

<p>]).
```</p>

<p>Довольно часто нужно выбрать сущности по какому-то полю или набору полей, например по id. Изначально для этого нужно писать where запрос</p>

<p>```erlang
repo:all(m_user, [</p>

<pre><code>q:where(fun([#{id := Id}]) -&gt; Id =:= 123 end)
</code></pre>

<p>]).
```
но, благодаря тому, что запросы легко строить динамически можно добавить немного сахара:</p>

<p>```erlang
like(Map) &ndash;></p>

<pre><code>q:where(fun([M|_]) -&gt;
    maps:fold(
        fun(K, V, S) -&gt;
            case maps:find(K, M) of
                {ok, V2} -&gt; S andalso V =:= V2;
                error -&gt; S
            end
        end, true, Map)
end).
</code></pre>

<p>repo:all(m_user, [ like(#{id => 123} ]).
```</p>

<p>я пошел еще дальше и repo api принимает map на вход.</p>

<p><code>erlang
repo:all(m_user, #{id =&gt; 123}). %% просто, понятно, лаконично
</code></p>

<p>для поиска единственного элемента есть функция get_one</p>

<p><code>erlang
{ok, User} = repo:get_one(m_user, #{id =&gt; 123}).
</code></p>

<p>Если результат запроса слишком большой, но при этом его можно обрабатывать потоково (например вывод отчета с большим количеством полей) то желательно использовать потоковое api через <a href="https://github.com/egobrain/zlist">zlist</a>,
что сильно уменьшает latency и потребление памяти, т.к. данные из БД подгружаются пачками по мере необходимости</p>

<p>```erlang
repo:all(m_user, [q:where(fun([#{age := Age}]) &ndash;> Age > 18 end)], fun(ZList) &ndash;></p>

<pre><code>zlist:foreach(fun(#{name := Name, age := Age}) -&gt; io:format("User: ~p, ~p\n", [Name, Age]) end, Zlist)
</code></pre>

<p>end).
```</p>

<p>Чуть не забыл. С помощью repo_utils:preload/1 можно подгружать данные из зависимых таблиц (has_many, belongs_to). Например:</p>

<p>```erlang
-module(m_user).
-export([schema/0]).</p>

<p>schema() &ndash;></p>

<pre><code>#{
    fields =&gt; #{
        id =&gt; #{type =&gt; int, index =&gt; true, required =&gt; true, readOnly =&gt; true},
        name =&gt; #{type =&gt; {varchar, 255}, required =&gt; true},
        age =&gt; #{type =&gt; int}
    },
    links =&gt; #{
        orders =&gt; {has_many, m_order, #{id =&gt; user_id}}
    },
    table =&gt; &lt;&lt;"users"&gt;&gt;
}.
</code></pre>

<p>```</p>

<p>запрос
```erlang
repo:all(m_user, [</p>

<pre><code>repo_utils:preload(orders)
</code></pre>

<p>]).
```</p>

<p>вернет подобную структуру
```erlang
[#{</p>

<pre><code>id =&gt; UserId,
name =&gt; UserName,
age =&gt; UserAge,
orders =&gt; [
     #{id =&gt; OrderId1,  user_id =&gt; UserId, sum =&gt; Sum1},
     #{id =&gt; OrderId2,  user_id =&gt; UserId, sum =&gt; Sum2},
     ...
</code></pre>

<p> },
 &hellip; Other users &hellip;
].
```</p>

<p>и все это одним SQL запросом.</p>

<h2>Insert/Update/Upsert</h2>

<p>С insert/update все очень просто. API принимает один или несколько объектов и по-умолчанию возвращает их же (через sql returnging)</p>

<p><code>erlang
repo:insert(m_user, [#{name =&gt; &lt;&lt;"Alladin"&gt;&gt;, age =&gt; 25}, ...]).
</code></p>

<p><code>erlang
repo:update(m_user, [#{id = 238, name =&gt; &lt;&lt;"Masha"&gt;&gt;, age =&gt; 18}, ...]).
</code></p>

<p><code>erlang
repo:upsert(m_user, [#{id = 239, name =&gt; &lt;&lt;"Igor"&gt;&gt;, age =&gt; 18}, ...]).
</code></p>

<p>Хочется добавить, что для каждой модели можно, при необходимости, объявить <code>before_save/2</code> и <code>after_save/2</code> hook-и
и, если хочется хранить сущности не в мапах, а, скажем, в record-ах, для этого есть <code>from_db/1</code> и <code>to_db/1</code> (для примера смотри <a href="https://github.com/egobrain/repo/blob/0.4.0/test/models/m_user.erl#L31">common тесты</a>)</p>

<h2>Batch update</h2>

<p>Можно обновлять сущности пачкой, а не по одному:</p>

<p><code>erlang
repo:set(m_user, [
   q:set(fun([#{age := Age}]) -&gt; #{age =&gt; Age * 2 } end)
]).
</code></p>

<h2>Batch delete</h2>

<p>Удаляются данные только пачкой.</p>

<p><code>erlang
repo:delete(m_user, [
   q:where(fun([#{age := Age}]) -&gt; Age &gt; 99 end)
]).
</code></p>

<h2>Резюме</h2>

<p>На данный момент я не считаю что реализация repo идеальна и эталонна, но она решает большую часть повседневных задач стоящих в моих проектах и уже успешно используется в production.
Нет ничего плохого в том, чтобы форкуть его и заменить, докрутить его части так как это необходимо именно вам, т.к. проект очень маленький и при этом ~100% покрыт тестами.</p>

<p>При этом проект позволил полностью избавиться от генерации SQL вручную (кроме миграций) и заметно сократить общий объем кодовой базы.
Стоит однако понимать, что библиотека equery не контролирует ошибки генерации sql, зато дает больший контроль во взаимодействии с Postgresql т.к. вы можете самостоятельно реализовать почти любую синтаксическую конструкцию. Вам необходимо понимать что и как происходи и где копать в случае проблем. Именно поэтому я привел описание как все работает выше.
Хорошо это или нет &ndash; решать вам.</p>

<h1>Дальнейшие планы</h1>

<p>Предстоит еще не мало работы:<br/>
&ndash; добавить unioun, multiple from в equery<br/>
&ndash; покрыть все спеками и dialyzer тестами<br/>
&ndash; написать документацию<br/>
&ndash; добавить больше common операций в equery pg_sql.erl<br/>
&ndash; реализовать dbschema-repo addon чтобы автоматически генерировать миграции для изменения схем</p>

<p>Основным недостатком (вероятно для некоторых) что проект ориентирован только на Posgresql и при том 9.5 версии (из-за upsert)</p>

<p>Буду рад комментариям и PR :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang ORM. Часть 2]]></title>
    <link href="http://www.egobrain.ru/blog/2014/02/26/erlang-orm-part-2/"/>
    <updated>2014-02-26T06:22:23+04:00</updated>
    <id>http://www.egobrain.ru/blog/2014/02/26/erlang-orm-part-2</id>
    <content type="html"><![CDATA[<p>В <a href="/blog/2014/02/19/erlang-orm-part-1">прошлой части</a> я говорил про генерацию модели, но так и не осветил как
соединить генерацию моделей и работу с БД. Сейчас это исправлю.</p>

<!-- more -->


<p>Все примеры Sql буду приводить с использованием PostgreSQL (<a href="https://github.com/wg/epgsql">epgsql</a>) и драйвер для <strong>tq_db</strong> <a href="https://github.com/egobrain/tq_postgres_driver">tq_postgres_driver</a>.</p>

<h1>Meta</h1>

<p>Для того, чтобы управлять моделями требуется большое количество мета информации.
Есть много способов ее хранить но я выбрал оптимальный для себя &ndash; функция <code>$meta/1</code>.<br/>
Она аргументом принимает ключ запрашиваемых данных.<br/>
Первым символом идет знак &ldquo;$&rdquo; (из-за этого приходится весь атом обрамлять в одинарные кавычки),
это сделано для того чтобы подчеркнуть, что функция является системной и ее не желательно использовать в бизнес логике.<br/>
Также определена функция <code>$meta/2</code>, которая просто пробрасывает вызов на <code>$meta/1</code>, но нужна для работы механизма вызова через кортеж.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="sc">$m</span><span class="n">eta</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;(</span><span class="nv">Opt</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span> <span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="sc">$m</span><span class="n">eta</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;(</span><span class="nv">Opt</span><span class="p">,</span> <span class="p">_</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">&#39;$meta&#39;</span><span class="p">(</span><span class="nv">Opt</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nn">db_user</span><span class="p">:</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="sc">$m</span><span class="n">eta</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;(</span><span class="nv">Opt</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% То же самое, что и&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nv">User</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">new</span><span class="p">().</span>
</span><span class='line'><span class="nv">User</span><span class="p">:</span><span class="err">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="sc">$m</span><span class="n">eta</span><span class="err">&amp;</span><span class="n">rsquo</span><span class="p">;(</span><span class="nv">Opt</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Опции которые по умолчанию задает <strong>tq_transform</strong>:</p>

<ul>
<li><code>module</code> &ndash; возвращает имя модуля для модели</li>
<li><code>{record_index,Field}</code> &ndash; позиция поля <em>Field</em> в модели</li>
</ul>


<p><strong>tq_db</strong> расширяет этот список еще несколькими:</p>

<ul>
<li><code>table</code> &ndash; имя таблицы Sql</li>
<li><code>indexes</code> &ndash; список индексных полей</li>
<li><code>{db_type, Field}</code> &ndash; тип поля <em>Field</em> в базе данных</li>
<li><code>{db_alias, Field}</code> &ndash; имя поля  <em>Field</em> в базе данных</li>
<li><code>{db_fields, r}</code> &ndash; список полей, которые разрешено писать в БД</li>
<li><code>{db_fields, w}</code> &ndash; список полей, которые разрешено читать из БД</li>
</ul>


<p>Для генерации <strong>tq_db</strong> необходимо использовать <code>tq_sqlmodel_transform</code> <em>parse_transform</em>,
обязательно должна быть указана опция модели <code>table</code>, заданы БД типы для полей и хотя бы
одно из них должно быть индексное.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">compile</span><span class="p">({</span><span class="n">parse_transform</span><span class="p">,</span> <span class="n">tq_sqlmodel_transform</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">id</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="n">index</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">integer</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">integer</span><span class="p">}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">login</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">login</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">email</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">email</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">password</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">min_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">6</span><span class="p">]}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">salt</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">binary</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">table</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;users&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}</span>
</span><span class='line'><span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Sql injection</h1>

<p>Метод защиты от sql инъекций будет достаточно простой: каждому аргументу, который будет подставлен
в результирующий Sql запрос в пару должно быть дописано описание типа,
которое укажет драйверу БД как работать с этими данными. Драйвер должен взять
на себя всю ответственность по проверке и экранированию данных.</p>

<p>Например:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">query</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="o">*</span> <span class="nv">FROM</span> <span class="n">users</span> <span class="nv">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="sc">$1</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[{</span><span class="n">integer</span><span class="p">,</span> <span class="mi">1</span><span class="p">}]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Connection pool</h1>

<p>Для работы с БД желательно использовать пул подключений. Имя пула может быть явно указан при генерации модели.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">pool_name</span><span class="p">,</span> <span class="n">db</span><span class="p">}</span>
</span><span class='line'><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>По умолчанию используется пул с именем <code>db</code>.</p>

<p>Логика работы пула должна быть полностью реализована драйвером.</p>

<h1>Select</h1>

<p>Вспомним структуру модели <em>db_user</em>.</p>

<p>Типичный запрос для получения данных выглядит так:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C</span><span class="p">}</span> <span class="o">=</span> <span class="nn">pgsql</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">postgres</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[{</span><span class="n">database</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;}]).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">Columnts</span><span class="p">,</span> <span class="nv">Rows</span><span class="p">}</span> <span class="o">=</span> <span class="nn">pgsql</span><span class="p">:</span><span class="nf">equery</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="n">login</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span> <span class="nv">FROM</span> <span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Теперь в <code>Rows</code> лежит кортеж <code>{Login, Email, Password, Salt}</code>.</p>

<p>Теперь понадобится функция для преобразования этого кортежа в нашу модель.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_model</span><span class="p">({</span><span class="nv">Login</span><span class="p">,</span> <span class="nv">Email</span><span class="p">,</span> <span class="nv">Password</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">})</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">new</span><span class="p">(),</span>
</span><span class='line'><span class="nv">User2</span> <span class="o">=</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="nv">Login</span><span class="p">),</span>
</span><span class='line'><span class="nv">User3</span> <span class="o">=</span> <span class="nv">User2</span><span class="p">:</span><span class="nf">set_email</span><span class="p">(</span><span class="nv">Email</span><span class="p">)</span>
</span><span class='line'><span class="nv">User4</span> <span class="o">=</span> <span class="nv">User3</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="nv">Password</span><span class="p">),</span>
</span><span class='line'><span class="nv">User</span><span class="p">:</span><span class="nf">set_salt</span><span class="p">(</span><span class="nv">Salt</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Можно ввести дополнительную функцию, которая будет принимать запрос и функцию конструктор и возвращать
список полученных моделей:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">query</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="nv">Sql</span><span class="p">,</span> <span class="nv">Args</span><span class="p">,</span> <span class="nv">Constructor</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_</span><span class="nv">Columnts</span><span class="p">,</span> <span class="nv">Rows</span><span class="p">}</span> <span class="o">=</span> <span class="nn">pgsql</span><span class="p">:</span><span class="nf">equery</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="nv">Sql</span><span class="p">,</span> <span class="nv">Args</span><span class="p">),</span>
</span><span class='line'><span class="p">[</span><span class="nv">Constructor</span><span class="p">(</span><span class="nv">Row</span><span class="p">)</span> <span class="p">||</span> <span class="nv">Row</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nv">Rows</span><span class="p">].</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>и использовать ее так:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C</span><span class="p">}</span> <span class="o">=</span> <span class="nn">pgsql</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">postgres</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[{</span><span class="n">database</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;}]).</span>
</span><span class='line'><span class="k">query</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="n">login</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span> <span class="nv">FROM</span> <span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[],</span> <span class="k">fun</span> <span class="n">to_model</span><span class="o">/</span><span class="mi">1</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Функция <code>to_model/1</code> получилась не универсальной, т.к. фиксировано количество полей, которые должны возвращаться из БД. Устраним этот досадный недостаток,
введя функции <code>field_constructor(FieldName)</code>, которая возвращает <em>Setter</em> для поля, и
<code>constructor(Fields)</code>, которая принимает список полей модели и возвращает аналог <code>to_model/1</code> для
преобразования кортежа в объект <em>db_user</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">field_constructor</span><span class="p">(</span><span class="n">login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>     <span class="k">fun</span> <span class="nn">db_user</span><span class="p">:</span><span class="n">set_login</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nf">field_constructor</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>     <span class="k">fun</span> <span class="nn">db_user</span><span class="p">:</span><span class="n">set_email</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nf">field_constructor</span><span class="p">(</span><span class="n">password</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>  <span class="k">fun</span> <span class="nn">db_user</span><span class="p">:</span><span class="n">set_password</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="nf">field_constructor</span><span class="p">(</span><span class="n">salt</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>      <span class="k">fun</span> <span class="nn">db_user</span><span class="p">:</span><span class="n">set_salt</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">constructor</span><span class="p">(</span><span class="nv">Fields</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fun</span><span class="p">(</span><span class="nv">Data</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Setters</span> <span class="o">=</span> <span class="p">[</span><span class="n">field_constructor</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="p">||</span> <span class="nv">F</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nv">Fields</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">DataList</span> <span class="o">=</span> <span class="nb">tuple_to_list</span><span class="p">(</span><span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">SettersDataList</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">zip</span><span class="p">(</span><span class="nv">Setters</span><span class="p">,</span> <span class="nv">DataList</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span>
</span><span class='line'>        <span class="k">fun</span><span class="p">({</span><span class="nv">Set</span><span class="p">,</span> <span class="nv">Val</span><span class="p">},</span> <span class="nv">User</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Set</span><span class="p">(</span><span class="nv">Val</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>        <span class="nn">db_user</span><span class="p">:</span><span class="nf">new</span><span class="p">(),</span>
</span><span class='line'>        <span class="nv">SettersDataList</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Кода больше, но он более универсален.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">C</span><span class="p">}</span> <span class="o">=</span> <span class="nn">pgsql</span><span class="p">:</span><span class="nf">connect</span><span class="p">(</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">localhost</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">postgres</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[{</span><span class="n">database</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;}]).</span>
</span><span class='line'><span class="k">query</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="n">login</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span> <span class="nv">FROM</span> <span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[],</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">db_user</span><span class="p">:</span><span class="nf">constructor</span><span class="p">([</span><span class="n">login</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">salt</span><span class="p">])).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">% или&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">query</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="n">login</span><span class="p">,</span> <span class="n">email</span> <span class="nv">FROM</span> <span class="n">users</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[],</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">db_user</span><span class="p">:</span><span class="nf">constructor</span><span class="p">([</span><span class="n">login</span><span class="p">,</span> <span class="n">email</span><span class="p">])).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Если при выгрузке данных потребуется сделать преобразование поля <code>from_db</code>, то следует изменить конструктор поля, к примеру:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="nf">field_constructor</span><span class="p">(</span><span class="n">login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fun</span><span class="p">(</span><span class="nv">Val</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">NewVal</span> <span class="o">=</span> <span class="n">from_db</span><span class="p">(</span><span class="nv">Val</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="nv">NewVal</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>tq_sqlmodel_transform</strong> может генерировать функции <code>get</code> и <code>find</code> для модели. Для этого надо явно указать через опцию модели</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">...</span>
</span><span class='line'> <span class="p">{</span><span class="n">generate</span><span class="p">,</span> <span class="p">[</span><span class="nb">get</span><span class="p">,</span> <span class="n">find</span><span class="p">]}</span>
</span><span class='line'><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>get</code> &ndash; Арность функции равна количеству индексных полей модели.<br/>
<code>find(Query, Args)</code> &ndash; принимает в качестве параметров запрос <em>Query</em>, который представляет собой dsl и должен обрабатываться далее. Поговорим об это позже.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; {ok, User} = db_user:get(1).</span>
</span><span class='line'><span class="gp">2&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">login</span><span class="p">().</span>
</span><span class='line'><span class="go">&amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;3&gt; {ok, Users} = db_user:find(&amp;lt;&amp;lt;&gt;&gt;, []). % Select all</span>
</span><span class='line'><span class="gp">4&gt;</span> <span class="p">[</span><span class="nv">U</span><span class="p">:</span><span class="nf">login</span><span class="p">()</span> <span class="p">||</span> <span class="nv">U</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="nv">Users</span><span class="p">].</span>
</span><span class='line'><span class="go">[&amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;, &amp;hellip;].&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Помимо представленных, для получения данных из БД можно воспользоваться более низкоуровневыми функциями из модулей <code>tq_sql</code> и <code>tq_dsl</code>.</p>

<h1>Save</h1>

<p>Для сохранения модели понадобится флаг <code>is_new</code>, который показывает является ли она новой или нет.
В конструкторе должны быть сброшены флаг <code>is_new</code> и флаги изменения полей (<code>_changed</code>).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">db_user</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="n">is_new</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">#db_user</span><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">is_new</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">field_constructor</span><span class="p">(</span><span class="n">login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fun</span><span class="p">(</span><span class="nv">Val</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="nv">Val</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">login_changed</span><span class="o">=</span><span class="n">false</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">constructor</span><span class="p">(</span><span class="nv">Fields</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">fun</span><span class="p">(</span><span class="nv">Data</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Setters</span> <span class="o">=</span> <span class="p">[</span><span class="n">field_constructor</span><span class="p">(</span><span class="nv">F</span><span class="p">)</span> <span class="p">||</span> <span class="nv">F</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nv">Fields</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">DataList</span> <span class="o">=</span> <span class="nb">tuple_to_list</span><span class="p">(</span><span class="nv">Data</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">SettersDataList</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">zip</span><span class="p">(</span><span class="nv">Setters</span><span class="p">,</span> <span class="nv">DataList</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">lists</span><span class="p">:</span><span class="nf">foldl</span><span class="p">(</span>
</span><span class='line'>        <span class="k">fun</span><span class="p">({</span><span class="nv">Set</span><span class="p">,</span> <span class="nv">Val</span><span class="p">},</span> <span class="nv">User</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Set</span><span class="p">(</span><span class="nv">Val</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">#db_user</span><span class="p">{</span><span class="n">is_new</span><span class="o">=</span><span class="n">false</span><span class="p">},</span>
</span><span class='line'>        <span class="nv">SettersDataList</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Так же добавим функцию <code>is_new/1</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_new</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">is_new</span> <span class="o">=</span> <span class="n">true</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Наконец-таки перейдем к сохранению модели.<br/>
Необходимо проверить является ли модель новой и, в зависимости от результата, выполнить <em>insert</em> или <em>update</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nv">User</span><span class="p">:</span><span class="nf">is_new</span><span class="p">()</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="c">% INSERT</span>
</span><span class='line'>    <span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="c">% UPDATE</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Я не хочу отправлять в БД все поля, буду передавать только реально измененные:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">db_changed_fields</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span><span class="nv">Val</span><span class="p">}</span> <span class="p">||</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Name</span><span class="p">,</span><span class="nv">Val</span><span class="p">,</span><span class="n">true</span><span class="p">}</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>         <span class="p">{</span><span class="n">login</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_init.login</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.login_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">email</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_init.email</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.email_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_init.password</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.password_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">salt</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_init.salt</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.salt_changed</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'><span class="p">].</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>В списке должны быть только те поля, которые храняться в БД.</p>

<p>Если понадобиться перед сохранением сделать преобразвание полея <code>to_db</code>, то следует изменить реализацию этой функции на следующую:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">db_changed_fields</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span><span class="nv">Val</span><span class="p">()}</span> <span class="p">||</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Name</span><span class="p">,</span><span class="nv">Val</span><span class="p">,</span><span class="n">true</span><span class="p">}</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>         <span class="p">{</span><span class="n">login</span><span class="p">,</span>
</span><span class='line'>          <span class="k">fun</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">to_db</span><span class="p">(</span><span class="nv">User</span><span class="nl">#db_init.login</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>          <span class="nv">User</span><span class="nl">#db_user.login_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">email</span><span class="p">,</span>
</span><span class='line'>          <span class="k">fun</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">User</span><span class="nl">#db_init.email</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>          <span class="nv">User</span><span class="nl">#db_user.email_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">password</span><span class="p">,</span>
</span><span class='line'>          <span class="k">fun</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">User</span><span class="nl">#db_init.password</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>          <span class="nv">User</span><span class="nl">#db_user.password_changed</span><span class="p">},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">salt</span><span class="p">,</span>
</span><span class='line'>          <span class="k">fun</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">User</span><span class="nl">#db_init.salt</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>          <span class="nv">User</span><span class="nl">#db_user.salt_changed</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'><span class="p">].</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Я не буду приводить тут пример как реализовать в общем виде генерацию Sql для <code>insert</code> и <code>update</code>,
имея всю мета информацию и данные &ndash; это будет тривиальным заданием.
Кому интересно &ndash; могут посмотреть пример реализации из postgres драйвера:
<a href="https://github.com/egobrain/tq_postgres_driver/blob/8ee00d059ae2400ec55002ea36770270b9e973aa/src/tq_postgres_driver_runtime.erl#L91">insert</a>,
<a href="https://github.com/egobrain/tq_postgres_driver/blob/8ee00d059ae2400ec55002ea36770270b9e973aa/src/tq_postgres_driver_runtime.erl#L119">update</a></p>

<p>Необходимость генерации функции <code>save</code> нужно указать через опцию модели <code>generate</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">...</span>
</span><span class='line'> <span class="p">{</span><span class="n">generate</span><span class="p">,</span> <span class="p">[</span><span class="n">save</span><span class="p">,</span> <span class="p">...]}</span>
</span><span class='line'><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Hooks</h1>

<p>Полезно иметь возможность задавать хуки для операций <code>save</code> и <code>delete</code>.
Для этого в реализацию методов <code>save</code> добавляются пред и пост условия.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">before_save_hook</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Model2</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">save_logic</span><span class="p">(</span><span class="nv">Model2</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>            <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Model3</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="n">after_save_hook</span><span class="p">(</span><span class="nv">Model</span><span class="p">,</span> <span class="nv">Model3</span><span class="p">);</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_</span><span class="nv">Reason</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Err</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">Err</span>
</span><span class='line'>        <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_</span><span class="nv">Reason</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Err</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Err</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">delete</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">before_delete_hook</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Model2</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">save_logic</span><span class="p">(</span><span class="nv">Model2</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>            <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Model3</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="n">after_delete_hook</span><span class="p">(</span><span class="nv">Model</span><span class="p">,</span> <span class="nv">Model3</span><span class="p">);</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_</span><span class="nv">Reason</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Err</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">Err</span>
</span><span class='line'>        <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_</span><span class="nv">Reason</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Err</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Err</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Обратите внимание, что хук <code>after_save_hook</code> отличается количеством аргументов. Иногда бывает полезно
иметь доступ к изначальному состоянию модели, к примеру, для проверки выполнялось ли первое сохранение модели или же обновление старой.</p>

<p>В <strong>tq_db</strong> хуки задаются через опции модели:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">before_save</span><span class="p">,</span> <span class="n">before_save_hook</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">after_save</span><span class="p">,</span> <span class="n">after_save_hook</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'> <span class="p">{</span><span class="n">before_delete</span><span class="p">,</span> <span class="n">before_delete_hook</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">after_delete</span><span class="p">,</span> <span class="n">after_delete_hook</span><span class="p">}</span>
</span><span class='line'><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>SQL DSL.</h1>

<p>Посмотрим на запрос на выборку данных</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; equery(C, &amp;lt;&amp;lt;&amp;ldquo;SELECT login, email, password, salt FROM users WHERE id = $1&amp;rdquo;&gt;&gt;,&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;pre&gt;&lt;code&gt;[{integer, 1}]</span>
</span><span class='line'><span class="go">db_user:constructor([login, email, password, salt])).</span>
</span><span class='line'><span class="go">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Что сразу мне не нравится:</p>

<ul>
<li>Я должен вручную писать <em>alias</em> поля в &ldquo;select&rdquo; части <em>Sql</em> запроса и имена полей в конструкторе и вручную контролировать корректность их заполения;</li>
<li>в &ldquo;where&rdquo; части я должен вручную писать <em>alias</em>-ы полей;</li>
<li>должен вручную вписывать типы аргументов для Args;</li>
<li>вручную указывать в запросе имя таблицы.</li>
</ul>


<p>Я решил это дело автоматизировать путем введения дополнительных конструкций непосредственно в Sql.</p>

<p>Получились такие такое расширение:</p>

<ul>
<li><code>$model.field_name</code> или <code>$field_name</code> &ndash; в sql вместо этой конструкции будет подставлен <em>alias</em> поля, полученный через <code>model:'$meta'({db_alias, field_name})</code>.</li>
<li><code>~model.field_name</code> или <code>~field_name</code> &ndash; в местах этих конструкций будет вставлен аргумент из Args. Для аргумента будет автоматически подставлен тип model:<code>$meta'({db_type, field_name})</code>. (Например для <code>~id</code>, из аргумента 10 получится [{integer, 10}]).</li>
<li><code>#model</code> &ndash; подстановка имени таблицы для модели <em>model</em> из <code>model:'$meta'({db_alias, field_name})</code>.</li>
<li><code>@model.field_name</code> или <code>@field_name</code> &ndash; в sql вместо этой конструкции будет подставлен <em>alias</em> поля, полученный через <code>model:'$meta'({db_alias, field_name})</code>, <code>field_name</code> также будет подставлен в <code>constructor</code>.</li>
<li><code>@model.field_name(...)</code> или <code>@field_name(...)</code> &ndash; <code>field_name</code> будет подставлен в <code>constructor</code>, но <em>alias</em> не попадет в sql. Например, для запроса <code>&lt;&lt;"SELECT @id(1)"&gt;&gt;</code>, в конструктор в качестве значения для поля id попадет 1.</li>
<li><code>@model.*</code> или  <code>@*</code> &ndash; извлечь все поля (которые помечены как <em>read</em>)</li>
<li><code>@model...</code> или <code>@...</code> &ndash; извлечь поля, которые ранее не упоминались в этом sql запросе (которые помечены как <em>read</em>)</li>
</ul>


<p>Т.к. часто возникают коллизии по именам, их иногда следует писать в виде &ldquo;table_alias.field&rdquo;, для указания синонимов таблицы
при подстановке алиасов полей можно использовать фигурные скобки:</p>

<ul>
<li><code>${table_alias}model.field_name</code> или <code>${table_alias}field_name</code></li>
<li><code>@{table_alias}model.field_name</code> или <code>@{table_alias}field_name</code></li>
<li><code>@{table_alias}model...</code> или <code>${table_alias}...</code></li>
<li><p><code>@{table_alias}model.*</code> или <code>${table_alias}*</code></p>

<blockquote><p>Весь представленый dsl был реализован для удовлетворения личных потребностей по работе с Sql.
<strong>DSL реализуется драйвером</strong>, так что, при желании, его <strong>можно легко его заменить</strong> на свой.</p></blockquote></li>
</ul>


<p>Для работы с новым языком запросов используется модуль <code>tq_dsl</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[</span><span class="nv">User</span><span class="p">]}</span> <span class="o">=</span> <span class="nn">tq_dsl</span><span class="p">:</span><span class="nf">model_query</span><span class="p">(</span><span class="nv">PoolName</span><span class="p">,</span> <span class="n">db_user</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">SELECT</span> <span class="p">@</span><span class="o">*</span> <span class="nv">FROM</span> <span class="nl">#db_user</span> <span class="nv">WHERE</span> <span class="sc">$i</span><span class="n">d</span> <span class="o">=</span> <span class="err">~</span><span class="n">id</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Usage</h1>

<p>Все готово к тому, чтобы привести комплексный пример. Перепишем модуль <em>db_user</em> по всем правилам, т.е. будем солить пароль при сохранении в БД, искать пользователя по связке <em>login</em> + <em>password</em> и т.п.</p>

<p>Первое что нужно сделать &ndash;  добавить драйвер <strong>tq_db</strong> в зависимости проекта, в моем случае это <code>tq_postgres_driver</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rebar.config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">{</span><span class="n">tq_transform</span><span class="p">,</span> <span class="s">&quot;.*&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;git://github.com/egobrain/tq_postgres_driver&quot;</span><span class="p">,</span> <span class="p">{</span><span class="n">tag</span><span class="p">,</span> <span class="s">&quot;0.1.0&quot;</span><span class="p">}}}</span>
</span><span class='line'>   <span class="p">]}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Далее необходимо запутить драйвер и задать параметры пула подключений</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>my_app.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">DbPool</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="nb">size</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">max_overflow</span><span class="p">,</span> <span class="mi">20</span><span class="p">},</span>
</span><span class='line'>
</span><span class='line'>     <span class="p">{</span><span class="n">hostname</span><span class="p">,</span> <span class="s">&quot;localhost&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">username</span><span class="p">,</span> <span class="s">&quot;postgres&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="s">&quot;password&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">database</span><span class="p">,</span> <span class="s">&quot;users&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'>
</span><span class='line'><span class="c">% Load App</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">load</span><span class="p">(</span><span class="n">tq_db</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">set_env</span><span class="p">(</span><span class="n">tq_db</span><span class="p">,</span> <span class="n">pools</span><span class="p">,</span> <span class="p">[{</span><span class="n">db</span><span class="p">,</span> <span class="n">tq_postgres_driver</span><span class="p">,</span> <span class="nv">DbPool</span><span class="p">}]),</span>
</span><span class='line'>
</span><span class='line'><span class="c">% Start Apps</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">tq_postgres_driver</span><span class="p">),</span>
</span><span class='line'><span class="nn">application</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="n">tq_db</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>описать модель</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">compile</span><span class="p">({</span><span class="n">parse_transform</span><span class="p">,</span> <span class="n">tq_sqlmodel_transform</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="nb">get</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">id</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">[</span>
</span><span class='line'>     <span class="n">index</span><span class="p">,</span>
</span><span class='line'>     <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_neg_integer</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">integer</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">mode</span><span class="p">,</span> <span class="n">r</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">login</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">[</span>
</span><span class='line'>     <span class="n">required</span><span class="p">,</span>
</span><span class='line'>     <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>         <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">min_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">]},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">32</span><span class="p">]},</span>
</span><span class='line'>         <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">login</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]}</span>
</span><span class='line'>    <span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">email</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">[</span>
</span><span class='line'>     <span class="n">required</span><span class="p">,</span>
</span><span class='line'>     <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>       <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">254</span><span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">email</span><span class="p">}</span>
</span><span class='line'>      <span class="p">]}</span>
</span><span class='line'>    <span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">password</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">[</span>
</span><span class='line'>     <span class="n">required</span><span class="p">,</span>
</span><span class='line'>     <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">mode</span><span class="p">,</span> <span class="n">srw</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>       <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">min_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">6</span><span class="p">]},</span>
</span><span class='line'>       <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">64</span><span class="p">]}</span>
</span><span class='line'>      <span class="p">]}</span>
</span><span class='line'>    <span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">salt</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">[</span>
</span><span class='line'>     <span class="n">required</span><span class="p">,</span>
</span><span class='line'>     <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">db_type</span><span class="p">,</span> <span class="n">varchar</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">mode</span><span class="p">,</span> <span class="n">srsw</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">model</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">{</span><span class="n">table</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;user&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">generate</span><span class="p">,</span> <span class="p">[</span><span class="nb">get</span><span class="p">,</span> <span class="n">save</span><span class="p">,</span> <span class="n">find</span><span class="p">,</span> <span class="n">delete</span><span class="p">]},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">before_save</span><span class="p">,</span> <span class="p">[</span><span class="n">valid</span><span class="p">,</span> <span class="n">salt_password</span><span class="p">]}</span>
</span><span class='line'>   <span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">get</span><span class="p">(</span><span class="n">login</span><span class="p">,</span> <span class="nv">Password</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">find</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;where $login = ~login limit 1&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;,</span> <span class="p">[</span><span class="nv">Login</span><span class="p">])</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">unknown_login</span><span class="p">};</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[</span><span class="nv">User</span><span class="p">]}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nb">hash</span><span class="p">(</span><span class="nv">Password</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">salt</span><span class="p">())</span> <span class="o">=:=</span> <span class="nv">User</span><span class="p">:</span><span class="nf">password</span><span class="p">()</span> <span class="k">of</span>
</span><span class='line'>            <span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'>            <span class="n">false</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">wrong_password</span><span class="p">}</span>
</span><span class='line'>        <span class="k">end</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nv">Err</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Err</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">salt_password</span><span class="p">(</span><span class="nv">Model</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nv">Model</span><span class="p">:</span><span class="nf">is_changed</span><span class="p">(</span><span class="n">password</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="n">true</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Salt</span> <span class="o">=</span> <span class="n">gen_salt</span><span class="p">(),</span>
</span><span class='line'>        <span class="nv">SaltedPassword</span> <span class="o">=</span> <span class="nb">hash</span><span class="p">(</span><span class="nv">Model</span><span class="p">:</span><span class="nf">password</span><span class="p">(),</span> <span class="nv">Salt</span><span class="p">),</span>
</span><span class='line'>        <span class="nv">Model</span><span class="p">:</span><span class="nf">from_proplist</span><span class="p">(</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>             <span class="p">{</span><span class="n">salt</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="nv">SaltedPassword</span><span class="p">}])</span>
</span><span class='line'>            <span class="p">]);</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Model</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">hash</span><span class="p">(</span><span class="nv">Password</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">md5</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nv">Password</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span> <span class="nv">Salt</span><span class="o">/</span><span class="n">binary</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gen_salt</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">list_to_binary</span><span class="p">([</span><span class="nn">random</span><span class="p">:</span><span class="nf">uniform</span><span class="p">(</span><span class="mi">87</span><span class="p">)</span> <span class="o">+</span> <span class="mi">35</span> <span class="p">||</span> <span class="p">_</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">)]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">md5</span><span class="p">(</span><span class="nv">Binary</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">iolist_to_binary</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>   <span class="nn">io_lib</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~.16b</span><span class="s">&quot;</span><span class="p">,[</span><span class="nv">N</span><span class="p">])</span>
</span><span class='line'>   <span class="p">||</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nv">N</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="nn">crypto</span><span class="p">:</span><span class="nb">hash</span><span class="p">(</span><span class="nb">md5</span><span class="p">,</span> <span class="nv">Binary</span><span class="p">)</span>
</span><span class='line'>  <span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>и, для полноты картины, валидаторы</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>validators.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">validators</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">min_length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="n">max_length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="n">email</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>     <span class="n">login</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'>    <span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">min_length</span><span class="p">(</span><span class="nv">MinLength</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">)</span> <span class="k">when</span> <span class="nb">byte_size</span><span class="p">(</span><span class="nv">Bin</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nv">MinLength</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">min_length</span><span class="p">,</span> <span class="nv">MinLength</span><span class="p">}};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">min_length</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">max_length</span><span class="p">(</span><span class="nv">MaxLength</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">)</span> <span class="k">when</span> <span class="nb">byte_size</span><span class="p">(</span><span class="nv">Bin</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nv">MaxLength</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">max_length</span><span class="p">,</span> <span class="nv">MaxLength</span><span class="p">}};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">max_length</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="nv">Re</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nn">re</span><span class="p">:</span><span class="nf">run</span><span class="p">(</span><span class="nv">Bin</span><span class="p">,</span> <span class="nv">Re</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">match</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nomatch</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">invalid</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">email</span><span class="p">(</span><span class="nv">Email</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="s">&quot;^[-</span><span class="se">\\</span><span class="s">w.]+@([A-z0-9][-A-z0-9]+</span><span class="se">\\</span><span class="s">.)+[A-z]{2,}$&quot;</span><span class="p">,</span> <span class="nv">Email</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">login</span><span class="p">(</span><span class="nv">Login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="s">&quot;^</span><span class="se">\\</span><span class="s">w+([.-]?</span><span class="se">\\</span><span class="s">w+)+$&quot;</span><span class="p">,</span> <span class="nv">Login</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>tq_db</strong> не создает схему таблицы в БД, так что вам придется завести ее самим.</p>

<p>Пример использования:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; {ok, User} = db_user:from_ext_proplist(&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;pre&gt;&lt;code&gt;[</span>
</span><span class='line'><span class="go"> {&amp;lt;&amp;lt;&quot;login&quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&quot;my_login&quot;&amp;gt;&amp;gt;},</span>
</span><span class='line'><span class="go"> {&amp;lt;&amp;lt;&quot;password&quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&quot;123&quot;&amp;gt;&amp;gt;},</span>
</span><span class='line'><span class="go"> {&amp;lt;&amp;lt;&quot;email&quot;&amp;gt;&amp;gt;, &amp;lt;&amp;lt;&quot;my.login@my.mail.ru&quot;&amp;gt;&amp;gt;}</span>
</span><span class='line'><span class="go">], [safe]).</span>
</span><span class='line'><span class="go">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;2&gt; User:save().</span>
</span><span class='line'><span class="go">{error, [{password, {min_length, 6}}]}</span>
</span><span class='line'><span class="gp">3&gt;</span> <span class="nv">User2</span> <span class="o">=</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123456</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="gp">4&gt;</span> <span class="nv">User2</span><span class="p">:</span><span class="nf">save</span><span class="p">().</span>
</span><span class='line'><span class="go">{ok, {db_user, &amp;hellip;}}</span>
</span><span class='line'><span class="gp">5&gt;</span> <span class="nn">db_user</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">login</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="go">{error, wrong_password}</span>
</span><span class='line'><span class="gp">6&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User3</span><span class="p">}</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nb">get</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">login</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123456</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="gp">7&gt;</span> <span class="nv">User3</span><span class="p">:</span><span class="nf">id</span><span class="p">().</span>
</span><span class='line'><span class="go">1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>На сегодня все. Но хочу сказать, что предстоит еще много работы для продолжения которой мне очень нужна обратная связь от сообщества,
так что пишите мне, задавайте вопросы, говорите пожелания и давайте рекомендации&hellip; Спасибо за внимание.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang ORM. Часть 1.]]></title>
    <link href="http://www.egobrain.ru/blog/2014/02/19/erlang-orm-part-1/"/>
    <updated>2014-02-19T11:19:24+04:00</updated>
    <id>http://www.egobrain.ru/blog/2014/02/19/erlang-orm-part-1</id>
    <content type="html"><![CDATA[<p>Всем известно, что в Erlang нет привычных объектов из &ldquo;классического&rdquo; ООП, но они, по сути, и не нужны.
Под словом объект, в данном случае, будет пониматься связка структура (record) и модуль, в котором описаны все функции для работы
с этой структурой.</p>

<p>Приведу пример, который буду рассматривать на протяжении всех своих рассуждений:</p>

<p>Классический объект &ndash; User с полями login, email, password и salt (куда без нее).
Его можно описать так (приставка <em>db_</em> &ndash; необходима, т.к. в erlang уже есть модуль с таким именем).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">db_user</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">login</span><span class="p">,</span>
</span><span class='line'><span class="n">email</span><span class="p">,</span>
</span><span class='line'><span class="n">password</span><span class="p">,</span>
</span><span class='line'><span class="n">salt</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">#db_user</span><span class="p">{}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Я хочу описать два своих проекта <a href="http://github.com/egobrain/tq_transform">tq_transform</a> и <a href="http://github.com/egobrain/tq_db">tq_db</a>. Которые суммарно генерируют объект позволяющий:</p>

<ol>
<li>Прятать реализацию, т.е. объекты за пределами модуля db_user не должны работать с record-ом напрямую. Это позволит в случае необходимости с легкостью поменять record, к примеру, на map.</li>
<li>Задавать значения по умолчанию.</li>
<li>Работать с &ldquo;внешним миром&rdquo;. Существует возможность указать какие поля и доступны  для отправки внешнему пользователю ( к примеру через REST api ) и в каком виде, какие нет, какие только для чтения, какие только для записи.</li>
<li>Конвертировать содержимое полей в/из proplist.</li>
<li>Выводить список измененных полей.</li>
<li>Задавать валидаторы как отдельных полей, так и всей модели в целом.</li>
<li>Проводить загрузку модели в/из БД, притом представление полей в БД и Erlang может отличаться.

<ol>
<li>При обновлении модели, подставлять в SQL запрос только обновленные поля.</li>
<li>Задавать хуки на события:
<code>before_save</code>,
<code>after_save</code>,
<code>before_delete</code>,
<code>after_delete</code></li>
</ol>
</li>
</ol>


<!-- more -->


<h1>tq_record_transform</h1>

<p>Начну с того, что <strong>tq_record_transform</strong> &ndash; это базовый плагин <em>tq_transform</em> для генерации функций, назначение которых будет описано далее, по описанию заданному через атрибуты <em>-field</em> и <em>-model</em>.
Сначала я постараюсь описать, как решается проблема в общем виде в Erlang, следом &ndash; как это реализовано или работает через tq_transform и почему именно так.</p>

<h2>Прячем реализацию</h2>

<p>Для того чтобы нормально работать с полями структуры не обращаясь к ним напрямую нужно задать getter-ы и setter-ы</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">db_user</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'> <span class="n">login</span><span class="p">,</span>
</span><span class='line'> <span class="n">email</span><span class="p">,</span>
</span><span class='line'> <span class="n">password</span><span class="p">,</span>
</span><span class='line'> <span class="n">salt</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">new</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="n">login</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">set_login</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">email</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">set_email</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">password</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">set_password</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'><span class="n">salt</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">set_salt</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">#db_user</span><span class="p">{}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">login</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user.login</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_login</span><span class="p">(</span><span class="nv">Login</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">login</span><span class="o">=</span><span class="nv">Login</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">email</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user.email</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_email</span><span class="p">(</span><span class="nv">Email</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">email</span><span class="o">=</span><span class="nv">Email</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">password</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user.password</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_password</span><span class="p">(</span><span class="nv">Password</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">password</span><span class="o">=</span><span class="nv">Password</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">salt</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user.salt</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_salt</span><span class="p">(</span><span class="nv">Salt</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span><span class="n">salt</span><span class="o">=</span><span class="nv">Salt</span><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Как можно заметить имя record-а совпадает с именем модуля. Я уже много раз писал об этом в том числе на <a href="http://habrahabr.ru/post/146471/">habre</a>.
Это позволяет использовать объект как классическим способом</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; User = db_user:new().</span>
</span><span class='line'><span class="gp">2&gt;</span> <span class="nv">User2</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_login</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">User</span><span class="p">).</span>
</span><span class='line'><span class="gp">3&gt;</span> <span class="nv">User3</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">User2</span><span class="p">).</span>
</span><span class='line'><span class="gp">4&gt;</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">login</span><span class="p">(</span><span class="nv">User3</span><span class="p">).</span>
</span><span class='line'><span class="go">&amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>так и более емким</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; User = db_user:new().</span>
</span><span class='line'><span class="gp">2&gt;</span> <span class="nv">User2</span> <span class="o">=</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_login</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="gp">3&gt;</span> <span class="nv">User3</span> <span class="o">=</span> <span class="nv">User2</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">).</span>
</span><span class='line'><span class="gp">4&gt;</span> <span class="nv">User3</span><span class="p">:</span><span class="nf">login</span><span class="p">().</span>
</span><span class='line'><span class="go">&amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Теперь как то же делается с помощью tq_transform.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">compile</span><span class="p">({</span><span class="n">parse_transform</span><span class="p">,</span> <span class="n">tq_record_transform</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">login</span><span class="p">,</span> <span class="p">[]}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">field</span><span class="p">({</span><span class="n">email</span><span class="p">,</span> <span class="p">[]}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">field</span><span class="p">({</span><span class="n">password</span><span class="p">,</span> <span class="p">[]}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">field</span><span class="p">({</span><span class="n">salt</span><span class="p">,</span> <span class="p">[]}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Т.е. надо в модуль добавить указание компилятору использовать parse_transform.
Далее определяются поля, имеющие отношение к данной модели через атрибут <code>-field()</code> и кортеж <code>{FieldName, Opts}</code>.
<em>FieldName</em> &ndash; имя поля, а про <em>Opts</em> поговорим чуть далее.</p>

<p>tq_transform сгенерирует record, геттеры, сеттер и еще много вспомогательных функций.</p>

<h2>Значения по умолчанию.</h2>

<p>Для того чтобы задать default-ные значения для модели надо модифицировать метод <code>new/2</code>.
В нашем примере это не требуется, но, к примеру, если бы у нас было поле group,
которое указывало бы имя группы в какой находится пользователь и по умолчанию оно было бы равно &ldquo;main&rdquo;,
то это бы выглядело так:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">#db_user</span><span class="p">{</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">=</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;main&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>В tq_record_transform этот же функционал достигается через опции.
Их две:
<code>{default, Value}</code> &ndash; задает значение по умолчанию.
<code>{default_fun, Fun}</code> &ndash; значение, если его необходимо вычислить.</p>

<p> Примеры:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">group</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">default</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;main&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>или</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">group</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">default_func</span><span class="p">,</span> <span class="n">get_default_group</span><span class="p">}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_default_group</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;main&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Сразу хочу рассказать о <em>Fun</em>. Везде, где в опциях упоминается функция, а это: deafult_func, валидаторы, хуки, <em>Fun</em>; может быть:</p>

<ul>
<li><code>F::atom()</code> &ndash; это равносильно простому вызову функции в том же модуле</li>
<li><code>{F::atom(), Args::list()}</code> &ndash; вызов F в текущем модуле с дополнительными аргументами Args (всегда идут вначале)</li>
<li><code>{M::atom(), F::atom()}</code> &ndash; равносильно вызову F в модуле M</li>
<li><code>{M::atom, F::atom(), Args::list()}</code> &ndash; вызов F в модуле M с дополнительными аргументами Args.</li>
</ul>


<p>Т.е. если get_default_group/0 значение по-умолчанию можно всеми ниже перечисленными способами:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">default_func</span><span class="p">,</span> <span class="n">get_default_group</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="n">default_func</span><span class="p">,</span> <span class="p">{</span><span class="n">get_default_group</span><span class="p">,</span> <span class="p">[]}}</span>
</span><span class='line'><span class="p">{</span><span class="n">default_func</span><span class="p">,</span> <span class="p">{</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">get_default_group</span><span class="p">}}</span>
</span><span class='line'><span class="p">{</span><span class="n">default_func</span><span class="p">,</span> <span class="p">{</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">get_default_group</span><span class="p">,</span> <span class="p">[]}}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Функция определена таким образом в виду того, что в атрибуте нельзя сделать вызов или указать лямбду.</p>

<h2>Ограничение доступа к полям.</h2>

<p>Поля в модели могут иметь различные параметры доступа:</p>

<ul>
<li>разрешения для чтения/записи</li>
<li>разрешения для сериализации/десериализации</li>
</ul>


<p>В текущем примере особыми параметрами отличаются поля <em>password</em> и <em>salt</em>.
<em>salt</em> &ndash; никогда не видна конечному пользователю, она нужна только для внутренних проверок.
<em>password</em> &ndash; можно только писать, т.к. при сохранении в БД он солится и хэшируется, то для клиента он более не несет никакой смысловой нагрузки.</p>

<p>В обычной версии пока нечего писать, т.к. еще не определены функции для сериализации/десериализации, но к ним еще вернемся в следующем пункте.</p>

<p>В tq_record_transform существует опция <code>{mode, AccessMode}</code>, которая отвечает за все правила доступа к полям.</p>

<p><code>AccessMode :: r | w | rw | sr | sw | srw | rsw | srsw</code></p>

<ul>
<li><code>r</code> &ndash; в атоме означает, что поле можно читать</li>
<li><code>w</code> &ndash; писать</li>
</ul>


<p>Приставка <code>s</code> к <code>r</code> или <code>w</code> (образована от слова <em>system</em>) означает &ndash; только системный доступ.
Исходя из вышесказанного получается, что:</p>

<ul>
<li><code>r</code> &ndash; может читать и пользователь и system</li>
<li><code>sr</code> &ndash; может читать только system</li>
<li><code>w</code> &ndash; может писать и пользователь и system</li>
<li><code>sw</code> &ndash; может писать только system</li>
</ul>


<p>Если в атоме отсутствует <code>r</code> &ndash; то вовсе не будет сгенерирован getter, если <code>w</code> &ndash; setter.</p>

<p>По умолчанию <code>mode</code> задан как <code>rw</code>.</p>

<p>Применимо к рассматриваемой модели:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">login</span><span class="p">,</span> <span class="p">[]}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">field</span><span class="p">({</span><span class="n">email</span><span class="p">,</span> <span class="p">[]}).</span>
</span><span class='line'><span class="p">-</span><span class="ni">field</span><span class="p">({</span><span class="n">password</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">mode</span><span class="p">,</span> <span class="n">srw</span><span class="p">}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">salt</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">mode</span><span class="p">,</span> <span class="n">srsw</span><span class="p">}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Получается, внешний пользователь может писать, но не читать пароль и вовсе никак не может влиять на соль.</p>

<h2>Сериализация</h2>

<p>Если необходимо задать модели сразу много полей &ndash; это не всегда удобно делать через сеттеры, т.к. приходится много раз копировать объект.
для этого лучше предусмотреть функции  <code>from_proplist/1</code> и <code>from_proplist/2</code> которые принимает proplist полей.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="n">new</span><span class="p">()).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([{</span><span class="n">login</span><span class="p">,</span> <span class="nv">Login</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="nv">Login</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([{</span><span class="n">email</span><span class="p">,</span> <span class="nv">Email</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_email</span><span class="p">(</span><span class="nv">Email</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([{</span><span class="n">password</span><span class="p">,</span> <span class="nv">Password</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="nv">Password</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([{</span><span class="n">salt</span><span class="p">,</span> <span class="nv">Salt</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_salt</span><span class="p">(</span><span class="nv">Salt</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_proplist</span><span class="p">([{</span><span class="nv">FieldName</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Value</span><span class="p">}|</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Rest</span><span class="p">],</span> <span class="p">_</span><span class="nv">User</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="nv">FieldName</span><span class="p">,</span> <span class="n">unknown</span><span class="p">}}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Пример:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">}</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">from_proplist</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">login</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;my_login&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;},</span>
</span><span class='line'> <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;password&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}</span>
</span><span class='line'><span class="p">]).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nv">UserLogin</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">login</span><span class="p">(</span><span class="nv">User</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Для того, чтобы получить поля модели &ldquo;извне&rdquo;, надо реализовать еще одну функцию &ndash; <code>from_ext_proplist</code> (ext от external) т.к. во-первых в ключах proplist-а уже не атомы, а бинари,
а во-вторых для поля могут требоваться дополнительные трансформации.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="n">new</span><span class="p">()).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">([],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">User</span><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">([{</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">login</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Login</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_login</span><span class="p">(</span><span class="nv">Login</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">([{</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">email</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Email</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_email</span><span class="p">(</span><span class="nv">Email</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">([{</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">password</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nv">Password</span><span class="p">}|</span><span class="nv">Rest</span><span class="p">],</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">(</span><span class="nv">Rest</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">set_password</span><span class="p">(</span><span class="nv">Password</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">from_ext_proplist</span><span class="p">([{</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nv">FieldName</span><span class="err">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Value</span><span class="p">}|</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="nv">Rest</span><span class="p">],</span> <span class="p">_</span><span class="nv">User</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="nv">FieldName</span><span class="p">,</span> <span class="n">unknown</span><span class="p">}}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Обратите внимание, что from_ext_proplist не реализует преобразование из поля &lt;&lt;&ldquo;salt&rdquo;>>, т.к. внешнему пользователю не разрешено писать в это поле.</p>

<p>Еще одна полезная функция <code>to_proplist/1</code>, но тут все проще:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_proplist</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">login</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">login</span><span class="p">()},</span>
</span><span class='line'> <span class="p">{</span><span class="n">email</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">email</span><span class="p">()},</span>
</span><span class='line'> <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">password</span><span class="p">()},</span>
</span><span class='line'> <span class="p">{</span><span class="n">salt</span><span class="p">,</span> <span class="nv">User</span><span class="p">:</span><span class="nf">salt</span><span class="p">()}</span>
</span><span class='line'><span class="p">].</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>А теперь вспомним про <code>mode</code>, сколько еще предстоит писанины&hellip; Так что оставлю реализацию <code>to_ext_proplist</code> на ваше усмотрение.</p>

<p>Теперь про <em>tq_record_transform</em>.</p>

<p>Прежде чем говорить про <code>*_ext_*</code> функции сразу расскажу про опции поля <code>from_ext</code> и <code>to_ext</code>.</p>

<ul>
<li><code>{from_ext, Fun}</code> &ndash; Fun применяется к данным, если Fun вернет <code>{ok, Data}</code>, то будет вызван сеттер с полученными данными, если <code>{error, Reason}</code> то,
к списку ошибок трансформации будет добавлена <code>{FieldName, Reason}</code>.</li>
<li><code>{to_ext, Fun}</code> &ndash; Fun применяется к данным перед их отправкой пользователю. Функция должна вернуть просто <code>Data</code>.</li>
</ul>


<p>А также полю можно указать опцию <code>{type, Type}</code>. Пока она используется только для указания parse_transform-у какую <code>from_ext</code> функцию и какие валидаторы по умолчанию использовать,
но в планах использовать ее для построения спецификации функций.
Поддерживаемые на данный момент типы &ndash; <code>binary</code>, <code>non_empty_binary</code>, <code>non_neg_integer</code>, <code>non_neg_float</code>, <code>integer</code>,
<code>float</code>, <code>boolean</code>, <code>date</code>, <code>time</code> и <code>datetime</code>.</p>

<p>Функции <code>from_proplist</code> и <code>from_ext_proplist</code> реализованы несколько по-другому. Они отличаются тем, что дополнительно принимают опции <code>safe | unsafe</code> и <code>ignore_unknown</code>,
и возвращает не первую ошибку, а <em>все ошибки</em>, которые возникли <em>по ходу преобразования полей</em>.</p>

<ul>
<li><code>ignore_unknown</code> &ndash; говорит продолжать выполнение, если встретилось неизвестное поле, а не выкидывать ошибку.</li>
<li><code>safe</code> &ndash; запрещает задавать поля которые помечены как системные,</li>
<li><code>unsafe</code> &ndash; разрешает задание системных полей</li>
</ul>


<p><code>to_proplist</code> и <code>to_ext_proplist</code> реализованы сходным образом.</p>

<p>Помимо вышеперечисленных функций генерируются <code>fields/[2,3]</code> и <code>ext_fields/[2,3]</code>.
На вход они принимают, помимо модели, список полей, которые надо вернуть. Т.е. работают почти как <code>to_proplist</code> аналоги, но возвращают только часть запрошенных полей.
Опции для них:</p>

<ul>
<li><code>binary_key</code> &ndash; означает, что список полей, которые надо вернуть содержит не атомы, а binary</li>
<li><code>unsafe</code> &ndash; вернуть и системные поля тоже</li>
<li><code>ignore_unknow</code> &ndash; игнорировать неизвестные имена полей</li>
</ul>


<h2>Список измененных полей</h2>

<p>Довольно часто встречается такая необходимость, например, при сохранении в БД или валидации.
Есть два способа определить, что поле изменилось:</p>

<ul>
<li>Хранить старую версию и новую</li>
<li>Ставить флаг об изменении в record-е через setter</li>
</ul>


<p>Первый способ заставляет хранить 2 версии одних и тех же данных, что порой слишком накладно по памяти. Так что реализуем 2-й.
Для каждого record-а поля зададим еще одно с пометкой об изменении.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">db_user</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'> <span class="n">login</span><span class="p">,</span>
</span><span class='line'> <span class="n">login_changed</span> <span class="o">=</span> <span class="n">false</span><span class="p">,</span>
</span><span class='line'> <span class="n">email</span><span class="p">,</span>
</span><span class='line'> <span class="n">email_changed</span> <span class="o">=</span> <span class="n">false</span><span class="p">,</span>
</span><span class='line'> <span class="n">password</span><span class="p">,</span>
</span><span class='line'> <span class="n">password_changed</span> <span class="o">=</span> <span class="n">false</span><span class="p">,</span>
</span><span class='line'> <span class="n">salt</span><span class="p">,</span>
</span><span class='line'> <span class="n">salt_changed</span> <span class="o">=</span> <span class="n">false</span>
</span><span class='line'><span class="p">}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Все сеттеры меняются по аналогичному правило, например</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_login</span><span class="p">(</span><span class="nv">Login</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nv">User</span><span class="nl">#db_user.login</span> <span class="k">of</span>
</span><span class='line'>    <span class="nv">Login</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">User</span><span class="p">;</span>
</span><span class='line'>    <span class="p">_</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">User</span><span class="nl">#db_user</span><span class="p">{</span>
</span><span class='line'>            <span class="n">login</span><span class="o">=</span><span class="nv">Login</span><span class="p">,</span>
</span><span class='line'>            <span class="n">login_changed</span><span class="o">=</span><span class="n">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Не стоит забывать про значения по умолчанию. Если они есть, то в них тоже стоит поменять маркер <strong>changed</strong>, например:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new</span><span class="p">()</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">#db_user</span><span class="p">{</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">=</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;main&quot;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;,</span>
</span><span class='line'>    <span class="n">group_changed</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Теперь 2 функции <code>is_changed/2</code> и <code>get_changed_field/2</code> для проверки поменялось ли поле, и получения списка измененных полей.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">is_changed</span><span class="p">(</span><span class="n">login</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nv">User</span><span class="nl">#db_user.login_changed</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_changed</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nv">User</span><span class="nl">#db_user.email_changed</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_changed</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nv">User</span><span class="nl">#db_user.password_changed</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_changed</span><span class="p">(</span><span class="n">salt</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="nv">User</span><span class="nl">#db_user.salt_changed</span><span class="p">;</span>
</span><span class='line'><span class="nf">is_changed</span><span class="p">(_</span><span class="nv">Field</span><span class="p">,</span> <span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">throw</span><span class="p">({</span><span class="n">unknown_field</span><span class="p">,</span> <span class="nv">Field</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Я использую <code>throw</code> вместо простого &ldquo;let it fail&rdquo;, мне кажется, что при таком подходе проще понять ошибку по логам.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_changed_fields</span><span class="p">(</span><span class="nv">User</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Fields</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">login</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.login</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.login_changed</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">email</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.email</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.email_changed</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">password</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.password</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.password_changed</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="n">salt</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.salt</span><span class="p">,</span> <span class="nv">User</span><span class="nl">#db_user.salt_changed</span><span class="p">},</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'><span class="p">[{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}</span> <span class="p">||</span> <span class="p">{</span><span class="nv">Name</span><span class="p">,</span> <span class="nv">Value</span><span class="p">,</span> <span class="n">true</span><span class="p">}</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nv">Fields</span><span class="p">].</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Код, сгенерированный <em>tq_record_transform</em>, особо ничем не отличается от приведенного выше, так что просто приведу пример использования.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; Proplist = [{&amp;lt;&amp;lt;&amp;ldquo;login&amp;rdquo;&gt;&gt;, &amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;}, {&amp;lt;&amp;lt;&amp;ldquo;password&amp;rdquo;&gt;&gt;, &amp;lt;&amp;lt;&amp;ldquo;my_password&amp;rdquo;&gt;&gt;}].</span>
</span><span class='line'><span class="gp">2&gt;</span> <span class="nv">User</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">from_ext_proplist</span><span class="p">(</span><span class="nv">Proplist</span><span class="p">).</span>
</span><span class='line'><span class="gp">3&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">is_changed</span><span class="p">(</span><span class="n">login</span><span class="p">).</span>
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">4&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">is_changed</span><span class="p">(</span><span class="n">password</span><span class="p">).</span>
</span><span class='line'><span class="go">true</span>
</span><span class='line'><span class="gp">5&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">is_changed</span><span class="p">(</span><span class="n">salt</span><span class="p">).</span>
</span><span class='line'><span class="go">false</span>
</span><span class='line'><span class="gp">6&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">get_changed_fields</span><span class="p">().</span>
</span><span class='line'><span class="go">[{login, &amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;}, {password, &amp;lt;&amp;lt;&amp;ldquo;my_password&amp;rdquo;&gt;&gt;}].&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Валидаторы</h2>

<p>Валидатор &ndash; эта функция, которая принимает на вход данные и возвращает <code>ok</code> или <code>{error, Reason}</code>.</p>

<p>Определим валидаторы для нашей модели:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">check_email</span><span class="p">(</span><span class="nv">Binary</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">regexp_match</span><span class="p">(</span><span class="s">&quot;^[-</span><span class="se">\\</span><span class="s">w.]+@([A-z0-9][-A-z0-9]+</span><span class="se">\\</span><span class="s">.)+[A-z]{2,}$&quot;</span><span class="p">,</span> <span class="nv">Email</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">match</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nomatch</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">invalid</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">validator</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="k">fun</span> <span class="n">check_email</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="nf">validator</span><span class="p">(</span><span class="n">login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="k">fun</span> <span class="n">check_login</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="err">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="nf">validator</span><span class="p">(</span><span class="nv">Field</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">throw</span><span class="p">({</span><span class="n">unknown_field</span><span class="p">,</span> <span class="nv">Field</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Логику самой функции valid я писать не буду, просто упомяну, что проблема достаточно сложная, требуется учитывать
обязательное ли это поле, получено он из БД или нет (<code>is_new/1</code> обсудим в следующей части), валидаторы могут выстраиваться в цепочки,
могут быть заданы не только для поля, но и для модели в целом.</p>

<p>В <em>tq_transform_utils</em> определено несколько валидаторов для типов. A <em>tq_record_transform</em> позволяет задать опции поля <code>required</code>,
 <code>{validators, Fun | [Fun]}</code> и опции модели <code>{validators, Fun | [Fun]}</code>. Про опции модели я пока не говорил, но они задаются через атрибут <code>-model([Opt])</code>.</p>

<p> В связи с новой информацией изменим модель так чтобы она удовлетворяла следующим критериям:</p>

<ul>
<li><code>login</code>, <code>password</code> и <code>salt</code> &ndash; обязательные поля</li>
<li><code>login</code> и <code>email</code> не могут быть пустыми и должны соответствовать определенным критериям</li>
<li><code>password</code> не меньше 6 символов.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db_user.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">db_user</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">compile</span><span class="p">({</span><span class="n">parse_transform</span><span class="p">,</span> <span class="n">tq_record_transform</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">login</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">login</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">email</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">email</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">password</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">non_empty_binary</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span><span class="p">,</span>
</span><span class='line'> <span class="p">{</span><span class="n">validators</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="n">validators</span><span class="p">,</span> <span class="n">min_length</span><span class="p">,</span> <span class="p">[</span><span class="mi">6</span><span class="p">]}</span>
</span><span class='line'>    <span class="p">]}</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">field</span><span class="p">({</span><span class="n">salt</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span>
</span><span class='line'> <span class="p">{</span><span class="n">type</span><span class="p">,</span> <span class="n">binary</span><span class="p">},</span>
</span><span class='line'> <span class="n">required</span>
</span><span class='line'><span class="p">]}).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Валидаторы:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>validators.erl </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">module</span><span class="p">(</span><span class="n">validators</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">export</span><span class="p">([</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">min_length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="n">email</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>     <span class="n">login</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'>    <span class="p">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="nv">Re</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nn">re</span><span class="p">:</span><span class="nf">run</span><span class="p">(</span><span class="nv">Bin</span><span class="p">,</span> <span class="nv">Re</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">match</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nomatch</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">invalid</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">email</span><span class="p">(</span><span class="nv">Email</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="s">&quot;^[-</span><span class="se">\\</span><span class="s">w.]+@([A-z0-9][-A-z0-9]+</span><span class="se">\\</span><span class="s">.)+[A-z]{2,}$&quot;</span><span class="p">,</span> <span class="nv">Email</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">login</span><span class="p">(</span><span class="nv">Login</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">regexp_match</span><span class="p">(</span><span class="s">&quot;^</span><span class="se">\\</span><span class="s">w+([.-]?</span><span class="se">\\</span><span class="s">w+)+$&quot;</span><span class="p">,</span> <span class="nv">Login</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">min_length</span><span class="p">(</span><span class="nv">MinLength</span><span class="p">,</span> <span class="nv">Bin</span><span class="p">)</span> <span class="k">when</span> <span class="nb">byte_size</span><span class="p">(</span><span class="nv">Bin</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nv">MinLength</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="p">{</span><span class="n">min_length</span><span class="p">,</span> <span class="nv">MinLength</span><span class="p">}};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">min_length</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Пример:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; Proplist = [{&amp;lt;&amp;lt;&amp;ldquo;login&amp;rdquo;&gt;&gt;, &amp;lt;&amp;lt;&amp;ldquo;my_login&amp;rdquo;&gt;&gt;}, {&amp;lt;&amp;lt;&amp;ldquo;password&amp;rdquo;&gt;&gt;, &amp;lt;&amp;lt;&amp;ldquo;pas&amp;rdquo;&gt;&gt;}, {&amp;lt;&amp;lt;&amp;ldquo;email&amp;rdquo;&gt;&gt;, &amp;lt;&amp;lt;&amp;ldquo;email@&amp;rdquo;&gt;&gt;}].</span>
</span><span class='line'><span class="gp">2&gt;</span> <span class="nv">User</span> <span class="o">=</span> <span class="nn">db_user</span><span class="p">:</span><span class="nf">from_ext_proplist</span><span class="p">(</span><span class="nv">Proplist</span><span class="p">).</span>
</span><span class='line'><span class="gp">3&gt;</span> <span class="nv">User</span><span class="p">:</span><span class="nf">valid</span><span class="p">().</span>
</span><span class='line'><span class="go">{error, [{password, {min_length, 6}}, {email, invalid}, {salt, required}]}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Итог</h2>

<p>Если всю логику, которая описывается в декларативном виде благодаря <em>tq_transform</em> каждый раз описывать вручную, то потребуется огромное количество boilerplate кода а значит, количество требуемого времени и вероятность возникновения ошибок сильно увеличатся.</p>

<p>В следующей части я расскажу о втором плагине для <em>tq_transtorm</em> &ndash; <a href="http://github.com/egobrain/tq_db"><em>tq_db</em></a>, который позволяет сохранять модели в БД, о моей маленькой надстройке для sql, и том, где и как хранится мета информация о полях и модели.</p>

<p><strong>P.S.</strong> Не так давно начал заниматься причесыванием кодовой базы для этих проектов, по ним пока мало документации ( на самом деле эта статья на данный момент наиболее полный справочник ). Так что, если будут вопросы, не стесняйтесь &ndash; задавайте, если пожелания или информация об ошибках и недочетах то слать их лучше или на github, или на мой email.</p>

<p><strong>P.P.S</strong> Если интересно посмотреть сгенерированный код, то для этого есть специальная функция</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erl'><span class='line'><span class="go">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;1&gt; tq_transform_utils:print_module(db_user).&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="go">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
